

## ЁЯФ░ рзз. ржкрзНрж░рзЛржЧрзНрж░рж╛ржорзЗрж░ ржЧржаржи (Structure)

### тЬЕ C:

```c
#include <stdio.h>

int main() {
    printf("Hello, World!");
    return 0;
}
```

### тЬЕ C#:

```csharp
using System;

class Program {
    static void Main() {
        Console.WriteLine("Hello, World!");
    }
}
```

### тЬи рждрзБрж▓ржирж╛:

| ржмрж┐рж╖рзЯ        | C                    | C#                    |
| ----------- | -------------------- | --------------------- |
| Entry Point | `main()`             | `Main()` (capital M)  |
| Header File | `#include <stdio.h>` | `using System;`       |
| Output      | `printf()`           | `Console.WriteLine()` |
| Return      | `return 0;` ржжрж┐рждрзЗ рж╣рзЯ  | ржирж╛ ржжрж┐рж▓рзЗржУ ржЪрж▓рзЗ          |

---

## ЁЯФ░ рзи. ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи (Variable Declaration)

### тЬЕ C:

```c
int x = 10;
float y = 5.5;
char ch = 'A';
```

### тЬЕ C#:

```csharp
int x = 10;
float y = 5.5f; // f ржирж╛ ржжрж┐рж▓рзЗ error
char ch = 'A';
```

### тЬи ржкрж╛рж░рзНржержХрзНржп:

* C# ржП `float` ржжрж┐рж▓рзЗ `f` suffix ржжрж┐рждрзЗ рж╣рзЯ, ржпрзЗржоржи: `5.5f`.
* C# ржЯрж╛ржЗржк-рж╕рзЗржЗржл ржУ ржЕржмржЬрзЗржХрзНржЯ-ржУрж░рж┐рзЯрзЗржирзНржЯрзЗржбред

---

## ЁЯФ░ рзй. ржХржирзНржбрж┐рж╢ржи (if-else)

### тЬЕ C:

```c
if(x > 5) {
    printf("Boro");
} else {
    printf("Chhoto");
}
```

### тЬЕ C#:

```csharp
if(x > 5) {
    Console.WriteLine("Boro");
} else {
    Console.WriteLine("Chhoto");
}
```

---

## ЁЯФ░ рзк. рж▓рзБржк (Looping)

### тЬЕ C:

```c
for(int i=0; i<5; i++) {
    printf("%d\n", i);
}
```

### тЬЕ C#:

```csharp
for(int i=0; i<5; i++) {
    Console.WriteLine(i);
}
```

тЬЕ `while` ржУ `do-while` C#-ржПржУ ржПржХржЗржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред

---

## ЁЯФ░ рзл. ржлрж╛ржВрж╢ржи / ржорзЗржержб (Functions / Methods)

### тЬЕ C:

```c
int add(int a, int b) {
    return a + b;
}
```

### тЬЕ C#:

```csharp
int Add(int a, int b) {
    return a + b;
}
```

### тЬи Note:

* C# ржП ржорзЗржержб ржХрзНрж▓рж╛рж╕рзЗрж░ ржнрж┐рждрж░рзЗ ржерж╛ржХрждрзЗ рж╣рзЯред
* ржирж╛ржорзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ C# ржП CamelCase ржмрж╛ PascalCase ржмрзЗрж╢рж┐ ржЗржЙржЬ рж╣рзЯред

---

## ЁЯФ░ рзм. ржЗржиржкрзБржЯ / ржЖржЙржЯржкрзБржЯ (I/O)

### тЬЕ C:

```c
int x;
scanf("%d", &x);
```

### тЬЕ C#:

```csharp
int x = Convert.ToInt32(Console.ReadLine());
```

---

## ЁЯФ░ рзн. ржХрзНрж▓рж╛рж╕ ржПржмржВ ржЕржмржЬрзЗржХрзНржЯ (Object-Oriented Part)

C рждрзЗ OOP ржирзЗржЗ, ржХрж┐ржирзНрждрзБ C# ржкрзБрж░рзЛржкрзБрж░рж┐ OOP:

### тЬЕ C# ржХрзНрж▓рж╛рж╕:

```csharp
class Student {
    public string Name;
    public int Age;

    public void Show() {
        Console.WriteLine($"Name: {Name}, Age: {Age}");
    }
}
```

### тЬЕ ржЗржЙржЬ ржХрж░рж╛:

```csharp
Student s1 = new Student();
s1.Name = "Pavel";
s1.Age = 22;
s1.Show();
```

---

## ЁЯФ░ рзо. ржЕрзНржпрж╛рж░рзЗ ржУ рж▓рзБржк (Array & Loop)

### тЬЕ C:

```c
int arr[3] = {1, 2, 3};
for(int i=0; i<3; i++) {
    printf("%d\n", arr[i]);
}
```

### тЬЕ C#:

```csharp
int[] arr = {1, 2, 3};
foreach(int item in arr) {
    Console.WriteLine(item);
}
```

---

## ЁЯФ░ рзп. ржХржоржи ржбрж╛ржЯрж╛ржЯрж╛ржЗржк (C vs C#)

| ржЯрж╛ржЗржк      | C                            | C#                        |
| --------- | ---------------------------- | ------------------------- |
| Integer   | int                          | int                       |
| Float     | float                        | float                     |
| Double    | double                       | double                    |
| Character | char                         | char                      |
| String    | char array (`char name[10]`) | `string` (Built-in class) |
| Boolean   | ржирзЗржЗ                          | `bool` (true/false)       |

---

## ЁЯФ░ рззрзж. ржХрж┐ржЫрзБ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржкрж╛рж░рзНржержХрзНржп

| ржмрж┐рж╖рзЯ                 | C                            | C#                          |
| -------------------- | ---------------------------- | --------------------------- |
| Procedural           | рж╣рзНржпрж╛ржБ                           | ржирж╛ (OOP-based)              |
| Header File          | `#include`                   | `using`                     |
| Manual Memory Manage | Yes (`malloc`, `free`)       | ржирж╛ (Garbage Collector)      |
| Platform             | Low-level, embedded friendly | High-level, .NET platform   |
| GUI Support          | ржирзЗржЗ                          | Windows Forms, WPF, Xamarin |
| Exception Handling   | ржирзЗржЗ                          | ржЖржЫрзЗ (`try-catch`)          |

---



OOPS Part:

## ЁЯФ░ рзз. ржХрзНрж▓рж╛рж╕ (Class) ржПржмржВ ржЕржмржЬрзЗржХрзНржЯ (Object)

### ЁЯза рж╕ржВржЬрзНржЮрж╛:

* **Class:** ржХрж╛ржарж╛ржорзЛ / ржмрзНрж▓рзБржкрзНрж░рж┐ржирзНржЯ
* **Object:** ржХрзНрж▓рж╛рж╕ ржерзЗржХрзЗ рждрзИрж░рж┐ ржмрж╛рж╕рзНрждржм рж░рзВржк

### тЬЕ ржЙржжрж╛рж╣рж░ржг:

```csharp
class Student {
    public string Name;
    public int Age;

    public void ShowInfo() {
        Console.WriteLine($"Name: {Name}, Age: {Age}");
    }
}

class Program {
    static void Main() {
        Student s1 = new Student(); // object рждрзИрж░рж┐
        s1.Name = "Pavel";
        s1.Age = 22;
        s1.ShowInfo();
    }
}
```

ЁЯУМ ржПржЦрж╛ржирзЗ `Student` рж╣ржЪрзНржЫрзЗ class, ржЖрж░ `s1` рж╣ржЪрзНржЫрзЗ objectред

---

## ЁЯФ░ рзи. ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░ (Constructor)

### ЁЯза ржХрж╛ржЬ:

Object рждрзИрж░рж┐ рж╣ржУрзЯрж╛рж░ рж╕ржорзЯ ржпрзЗржЯрж╛ **ржЕржЯрзЛржорзЗржЯрж┐ржХ ржХрж▓** рж╣рзЯред

### тЬЕ ржЙржжрж╛рж╣рж░ржг:

```csharp
class Student {
    public string Name;
    public int Age;

    public Student(string name, int age) {  // Constructor
        Name = name;
        Age = age;
    }

    public void ShowInfo() {
        Console.WriteLine($"Name: {Name}, Age: {Age}");
    }
}

class Program {
    static void Main() {
        Student s1 = new Student("Siam", 18);
        s1.ShowInfo();
    }
}
```

---

## ЁЯФ░ рзй. ржЗржиржХрзНржпрж╛ржкрж╕рзБрж▓рзЗрж╢ржи (Encapsulation)

### ЁЯза ржХрж╛ржЬ:

ржбрзЗржЯрж╛ ржЧрзЛржкржи рж░рзЗржЦрзЗ рж╕рзЗржЯрж╛рж░ ржУржкрж░ ржирж┐рзЯржирзНрждрзНрж░ржг рж░рж╛ржЦрж╛ред (private + public method)

### тЬЕ ржЙржжрж╛рж╣рж░ржг:

```csharp
class BankAccount {
    private int balance = 0;

    public void Deposit(int amount) {
        if (amount > 0)
            balance += amount;
    }

    public void ShowBalance() {
        Console.WriteLine($"Balance: {balance}");
    }
}
```

---

## ЁЯФ░ рзк. ржЗржирж╣рзЗрж░рж┐ржЯрзЗржирзНрж╕ (Inheritance)

### ЁЯза ржХрж╛ржЬ:

ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ ржЕржирзНржп ржХрзНрж▓рж╛рж╕ ржерзЗржХрзЗ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп **ржЙрждрзНрждрж░рж╛ржзрж┐ржХрж╛рж░рж╕рзВрждрзНрж░рзЗ ржкрж╛рзЯ**ред

### тЬЕ ржЙржжрж╛рж╣рж░ржг:

```csharp
class Animal {
    public void Sound() {
        Console.WriteLine("Animal sound");
    }
}

class Dog : Animal {
    public void Bark() {
        Console.WriteLine("Dog barks");
    }
}

class Program {
    static void Main() {
        Dog d = new Dog();
        d.Sound();  // base class ржПрж░ method
        d.Bark();   // child class ржПрж░ method
    }
}
```

---

## ЁЯФ░ рзл. ржкрж▓рж┐ржорж░ржлрж┐ржЬржо (Polymorphism)

### ЁЯза ржорж╛ржирзЗ:

ржПржХржЯрж┐ ржЬрж┐ржирж┐рж╕ ржЕржирзЗржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

### тЬЕ ржЙржжрж╛рж╣рж░ржг (Method Overriding):

```csharp
class Animal {
    public virtual void Sound() {
        Console.WriteLine("Animal sound");
    }
}

class Cat : Animal {
    public override void Sound() {
        Console.WriteLine("Meow");
    }
}

class Program {
    static void Main() {
        Animal a = new Cat();  // Parent type, child object
        a.Sound(); // Output: Meow
    }
}
```

---

## ЁЯФ░ рзм. ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрж╢ржи (Abstraction)

### ЁЯза ржХрж╛ржЬ:

ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЬрж┐ржирж┐рж╕ ржжрзЗржЦрж╛ржирзЛ, ржЕржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЧрзЛржкржи рж░рж╛ржЦрж╛ред

### тЬЕ ржЙржжрж╛рж╣рж░ржг (Abstract Class):

```csharp
abstract class Shape {
    public abstract void Draw();
}

class Circle : Shape {
    public override void Draw() {
        Console.WriteLine("Drawing Circle");
    }
}

class Program {
    static void Main() {
        Shape s = new Circle();
        s.Draw();  // Output: Drawing Circle
    }
}
```

---

## ЁЯФ░ рзн. ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ (Interface)

### ЁЯза ржХрж╛ржЬ:

ржПржХржЯрж┐ ржЪрзБржХрзНрждрж┐рж░ ржорждрзЛред ржпрзЗржЗ class implement ржХрж░ржмрзЗ, рждрж╛ржХрзЗ рж╕ржм method define ржХрж░рждрзЗржЗ рж╣ржмрзЗред

### тЬЕ ржЙржжрж╛рж╣рж░ржг:

```csharp
interface IAnimal {
    void Speak();
}

class Cow : IAnimal {
    public void Speak() {
        Console.WriteLine("Hum hum");
    }
}
```

---

## ЁЯФЪ ржЙржкрж╕ржВрж╣рж╛рж░ (Summary):

| ржЯржкрж┐ржХ          | ржмрзНржпрж╛ржЦрзНржпрж╛                              |
| ------------- | ---------------------------------  |
| Class         | ржмрзНрж▓рзБржкрзНрж░рж┐ржирзНржЯ / ржХрж╛ржарж╛ржорзЛ                    |
| Object        | ржХрзНрж▓рж╛рж╕ ржерзЗржХрзЗ рждрзИрж░рж┐ ржмрж╕рзНрждрзБ                   |
| Constructor   | Object рждрзИрж░рж┐ рж╣рж▓рзЗ ржпрзЗржЯрж╛ ржЪрж▓рзЗржЗ           |
| Encapsulation | ржкрзНрж░рзЛржкрж╛рж░рзНржЯрж┐ ржЧрзЛржкржи + ржирж┐рзЯржирзНрждрзНрж░ржг               |
| Inheritance   | ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржЙрждрзНрждрж░рж╛ржзрж┐ржХрж╛рж░                    |
| Polymorphism  | ржПржХржЗ method тЖТ ржЖрж▓рж╛ржжрж╛ ржЖржЪрж░ржг         |
| Abstraction   | ржжрж░ржХрж╛рж░рж┐ ржЬрж┐ржирж┐рж╕ рж╕рж╛ржоржирзЗ, ржмрж╛ржХрж┐ржЯрж╛ рж▓рзБржХрж╛ржирзЛ   |
| Interface     | рж╕ржорзНржкрзВрж░рзНржг Abstract + ржЪрзБржХрзНрждрж┐               |

---

